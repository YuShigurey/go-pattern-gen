package main

import (
	"flag"
	"fmt"
	"go/ast"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/YuShigurey/go-pattern-gen/core"
	"golang.org/x/tools/go/packages"
)

var (
	output = flag.String("output", "", "output file name; default srcdir/<type>_visitor.go")
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprint(os.Stderr, "\tvisitor [flags] -type T [directory]\n")
}

func main() {
	flag.Usage = Usage
	flag.Parse()

	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	var dir string
	if len(args) == 1 && core.IsDirectory(args[0]) {
		dir = args[0]
	} else {
		dir = filepath.Dir(args[0])
	}

	g := Generator{
		templateData: &templateData{
			PackageName: "", // Assign later.
		},
	}
	g.parsePackage(args)
	g.generate()

	src := g.format()
	outputName := *output
	if outputName == "" {
		baseName := "strategy_stubs.go"
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := os.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

//#region -- Generator --

const TEMPLATE = `// Code generated by "strategy"; DO NOT EDIT.
package {{.PackageName}}

{{ range .StrategyInterfaces}}
func (t {{.EnumType}}) NewDefaultStrategy() {{.InterfaceName}} {
	var s {{.InterfaceName}}
	switch t {
		{{- range .Implementations}}
	case {{.EnumName}}:
		s = &{{.Name}}{}
		{{- end}}
	}
	return s
}
{{ $EnumType := .EnumType}}
	{{- range .Implementations}}
func (s {{.Name}}) GetStrategyType() {{$EnumType}} {
	return {{.EnumName}}
}
	{{ end }}


{{- end}}
`

type Strategy struct {
	Name     string
	EnumName string
}

type StrategyInterface struct {
	InterfaceName   string
	EnumType        string
	Implementations []*Strategy
}

type templateData struct {
	PackageName        string
	StrategyInterfaces []*StrategyInterface
}

// File holds a single parsed file and associated data.
type Generator struct {
	templateData *templateData
	pkg          *core.Package // Package we are scanning.
}

func (g *Generator) parsePackage(patterns []string) {
	cfg := &packages.Config{
		Mode:  packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedSyntax,
		Tests: false,
		// BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}

	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}

	if len(pkgs) != 1 {
		log.Fatalf("expected 1 package; got %d", len(pkgs))
	}
	g.templateData.PackageName = pkgs[0].Name
	g.addPackage(pkgs[0])
}

func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &core.Package{
		Name:  pkg.Name,
		Defs:  pkg.TypesInfo.Defs,
		Files: make([]*core.File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.Files[i] = &core.File{
			File: file,
			Pkg:  g.pkg,
			// trimPrefix:  g.trimPrefix,
			// lineComment: g.lineComment,
		}
	}
}

func (g *Generator) generate() {
	for _, file := range g.pkg.Files {
		if file.File != nil {
			ast.Inspect(file.File, file.GenDecl)
		}
	}

	for _, T := range core.FilterT[*ast.InterfaceType](g.pkg.GetTypes()) {
		var isStrategyInterface bool
		var returnType string
		for _, method := range T.Type.(*ast.InterfaceType).Methods.List {
			name := method.Names[0].Name
			if name == "GetStrategyType" {
				isStrategyInterface = true
				returnType = method.Type.(*ast.FuncType).Results.List[0].Type.(*ast.Ident).Name
			}

		}
		if isStrategyInterface {
			g.templateData.StrategyInterfaces = append(g.templateData.StrategyInterfaces, &StrategyInterface{
				InterfaceName: T.Name.Name,
				EnumType:      returnType,
			})
		}
	}

	for _, inf := range g.templateData.StrategyInterfaces {
		for _, cons := range g.pkg.GetConstants() {
			if len(cons.Specs) == 0 {
				continue
			}

			consTypeName := ""

			for _, spec := range cons.Specs {
				if consTypeName == "" {
					consTypeName = spec.(*ast.ValueSpec).Type.(*ast.Ident).Name
					if consTypeName != inf.EnumType {
						break
					}
				}
				constName := spec.(*ast.ValueSpec).Names[0].Name
				structName := strings.Replace(constName, inf.EnumType, inf.InterfaceName, 1)

				inf.Implementations = append(inf.Implementations, &Strategy{
					Name:     structName,
					EnumName: constName,
				})
			}
		}
	}
}

func (g *Generator) format() []byte {
	builder := &strings.Builder{}
	template.Must(template.New("strategy").Parse(TEMPLATE)).Execute(builder, g.templateData)
	return []byte(builder.String())
}
