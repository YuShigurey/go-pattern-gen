package main

import (
	"flag"
	"fmt"
	"go/ast"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/YuShigurey/go-pattern-gen/core"
	"golang.org/x/tools/go/packages"
)

var (
	name      = flag.String("name", "", "name of the visitor type; must be set")
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_visitor.go")
	buildTags = flag.String("tags", "", "comma-separated list of build tags to apply")
)

func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprint(os.Stderr, "\tvisitor [flags] -type T [directory]\n")

}

func main() {
	flag.Usage = Usage
	flag.Parse()

	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")
	var tags []string
	if len(*buildTags) > 0 {
		panic("not implemented")
		// tags = strings.Split(*buildTags, ",")
	}

	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	var dir string
	if len(args) == 1 && core.IsDirectory(args[0]) {
		dir = args[0]
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
	}

	g := Generator{
		templateData: &templateData{
			PackageName: "", // Assign later.
			VisitorName: *name,
		},
	}
	g.parsePackage(args, tags)
	for _, typeName := range types {
		g.generate(typeName)
	}

	src := g.format()
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_visitor.go", *name)
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := os.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

//#region -- Generator --

const TEMPLATE = `// Code generated by "visitor"; DO NOT EDIT.
package {{.PackageName}}


type {{.VisitorName}}Visitor interface {
{{- range .Types}}
	visitFor{{.}}(t *{{.}})
{{- end}}
}

type Empty{{.VisitorName}}VisitorImpl struct{}
{{- range .Types}}
func (v *Empty{{$.VisitorName}}VisitorImpl) visitFor{{.}}(t *{{.}}) {}

{{- end}}

{{- range .Types}}
func (t *{{.}}) accept(v {{$.VisitorName}}Visitor) {
	v.visitFor{{.}}(t)
}
{{- end}}
`

type templateData struct {
	PackageName string
	VisitorName string
	Types       []string
}

// File holds a single parsed file and associated data.
type Generator struct {
	templateData *templateData
	pkg          *core.Package // Package we are scanning.
}

func (g *Generator) parsePackage(patterns []string, tags []string) {
	cfg := &packages.Config{
		Mode:       packages.NeedName | packages.NeedTypes | packages.NeedTypesInfo | packages.NeedSyntax,
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}

	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}

	if len(pkgs) != 1 {
		log.Fatalf("expected 1 package; got %d", len(pkgs))
	}
	g.templateData.PackageName = pkgs[0].Name
	g.addPackage(pkgs[0])
}

func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &core.Package{
		Name:  pkg.Name,
		Defs:  pkg.TypesInfo.Defs,
		Files: make([]*core.File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.Files[i] = &core.File{
			File: file,
			Pkg:  g.pkg,
			// trimPrefix:  g.trimPrefix,
			// lineComment: g.lineComment,
		}
	}
}

func (g *Generator) generate(typeName string) {
	for _, file := range g.pkg.Files {
		if file.File != nil {
			ast.Inspect(file.File, file.GenDecl)
			for _, structTypeName := range file.StructTypes {
				// In same package, structTypeName will be unique even if it is defined in different files.
				if typeName == structTypeName {
					g.templateData.Types = append(g.templateData.Types, typeName)
					break
				}
			}
		}
	}
}

func (g *Generator) format() []byte {
	builder := &strings.Builder{}
	template.Must(template.New("visitor").Parse(TEMPLATE)).Execute(builder, g.templateData)
	return []byte(builder.String())
}
